[["index.html", "DLL 2021, R section 1 Workshop introduction 1.1 Course intent 1.2 Structure and resources 1.3 Expectations", " DLL 2021, R section darachm etc? etc? etc? 2021-06-03 1 Workshop introduction 1.1 Course intent Here is what the course is trying to do. We want to get you to a basic framework so you can work with someone effectively. That framework is getting you oriented with the basics and how to think about figuring out tasks in R. 1.2 Structure and resources 1.2.1 This syllabus and videos We’ve made this doc for your reference, and it’s our living document of “slides” and reference. We also made short videos for teaching, so that any mini-lectures are concise and complete. It also allows us to work as assistants. These are uploaded on Youtube, and should be accessible via the embeds on this site. 1.2.2 Slack channel We are going to set this up to be a good place to go for ideas/help. The channel is called …. what? 1.3 Expectations Don’t be a jerk Pull together "],["day-3-intoduction-to-r.html", "2 Day 3 - intoduction to R 2.1 Rstudio, and basics 2.2 Data exploration pipelines 2.3 Getting started in R", " 2 Day 3 - intoduction to R Rstudio etc 2.1 Rstudio, and basics Rstudio 1 ## [1] 1 x &lt;- 1 x = 1 x &lt;- 1 “Scoping”[^scoping] is a term that you can really get into, but for now, just use &lt;-[^arrow-other-way]. [^scoping] : oh boy computer science here [^arrow-other-way] : you can also go the other way, like 1 -&gt; x, but nobody does that 2.2 Data exploration pipelines Approach: an Rmd tutorial with a simple dataset in R. This is meant to be a motivation for what one can do in R, not necessarily understanding syntax of every function/operation used Topics/Exercises Present a conceptual framework for a pipeline - more of a tutorial Use an Rmd file for this and introduce how to navigate the Rmd file Scholars can execute a given Rmd Scholars can modify a given Rmd Scholars know what the major pieces of an Rmd are (code and not code) Scholars know about caching and arguments for code chunks Scholars know how to make their own new Rmd file and run it Load a simple dataset in R - the iris dataset, peek at the table with head, summarize the columns, and make a scatter plot with base R. This introduces several topics Requires: interacting with R, calling functions, and saving variables 2.3 Getting started in R Learning Goals: Apply internet searches, help functions, and documentation to learn to use the appropriate functions. Assign and manipulate variables within the current environment/session in R. Create, modify, and access into a vector (an ordered grouping of elements). Create, modify, and access into a dataframe (an ordered two-dimensional grouping of elements with rows and columns). 2.3.1 Getting Help in R If you run into any error while using R, it is a great idea to look up your error message in Google and read through forum posts on StackOverflow. You may find it also helps to know more about your session info such as the version of R you are using, and what packages you have currently loaded. sessionInfo() You can look up what functions do using either a question mark ? or the help function. ?rm help(rm) 2.3.2 Variables You can assign variables using the = or &lt;- operators. I will use the &lt;- operator exclusively going forward. save.num &lt;- 7 save.num ## [1] 7 Variables are mutable: you can overwrite the saved value of a variable with another value. save.num = 10 save.num ## [1] 10 Variables can be saved as other values such as character strings or boolean values (True or False). save.string &lt;- &quot;hello&quot; save.bool &lt;- TRUE You can check what variables you have assigned in your current working environment. ls() ## [1] &quot;save.bool&quot; &quot;save.num&quot; &quot;save.string&quot; You can also remove saved variables. rm(save.num) ls() ## [1] &quot;save.bool&quot; &quot;save.string&quot; 2.3.3 Working with Vectors You can create vectors (an ordered list of elements) by combining elements with the c function. first.vector &lt;- c(38, 32, 45, 23, 6, 56, 234, 1239, 123, 123, 342, 1234) second.vector &lt;- c(1, 34, 10) first.vector ## [1] 38 32 45 23 6 56 234 1239 123 123 342 1234 second.vector ## [1] 1 34 10 third.vector &lt;- c(first.vector, second.vector) third.vector ## [1] 38 32 45 23 6 56 234 1239 123 123 342 1234 1 34 10 fruits &lt;- c(&quot;apples&quot;, &quot;oranges&quot;, &quot;bananas&quot;) R comes with pre-built variables that you can use, such as the vector of all alphabetic characters. letters ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; LETTERS ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; ## [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; There are several helpful functions and an operator that can speed up your ability to generate vectors of numeric values. Explore what the : operator does below and generate a few numeric vectors of your own. 1:4 ## [1] 1 2 3 4 ?seq ?rep z &lt;- seq(-pi, pi, length = 20) z ## [1] -3.1415927 -2.8108987 -2.4802047 -2.1495108 -1.8188168 -1.4881228 ## [7] -1.1574289 -0.8267349 -0.4960409 -0.1653470 0.1653470 0.4960409 ## [13] 0.8267349 1.1574289 1.4881228 1.8188168 2.1495108 2.4802047 ## [19] 2.8108987 3.1415927 x &lt;- c(1, 3, 2) x ## [1] 1 3 2 y &lt;- c(1, 4, 3) length(x) ## [1] 3 length(y) ## [1] 3 What does the length function do? Test it on a few more vectors that you have created. x + y ## [1] 2 7 5 You can perform mathematical operations on an entire numeric vector all at once. first.vector * 2 ## [1] 76 64 90 46 12 112 468 2478 246 246 684 2468 ?sin sin(first.vector) ## [1] 0.2963686 0.5514267 0.8509035 -0.8462204 -0.2794155 -0.5215510 ## [7] 0.9988167 0.9364937 -0.4599035 -0.4599035 0.4201397 0.6019277 2.3.4 Indexing and Subsetting Indexing is a way to access into a vector (or matrix/data frame) and pull out certain elements. There are multiple ways to index into a vector, one of the easiest ways is to pull out an element based on its order/position in the grouping (its index). We use [] immediately after the name of the grouping (in this case a vector) to access into it. second.vector[2] # pull out second element ## [1] 34 fruits[3] # pull out third fruit ## [1] &quot;bananas&quot; fruits[2:3] # pull out 2nd and 3rd fruit ## [1] &quot;oranges&quot; &quot;bananas&quot; fruits[c(1, 3)] # pull out 1st and 3rd fruit ## [1] &quot;apples&quot; &quot;bananas&quot; You can remove elements of a vector by using the same syntax of indexing, but instead put a negative sign in front of the index number. fruits[-1] ## [1] &quot;oranges&quot; &quot;bananas&quot; 2.3.5 Using Logicals You can also access elements in a vector that meet certain criteria (using conditional logic). second.vector &lt; 20 ## [1] TRUE FALSE TRUE second.vector[second.vector &lt; 20] ## [1] 1 10 You can use the standard comparison operators like &gt; or &lt; to check greater than or less than. You can also use == to check for equality or != to check that values are not equal. save.num &lt;- 7 save.num + 10 ## [1] 17 save.num != 8 ## [1] TRUE save.num == 8 ## [1] FALSE Conditional logic is where a statement evaluates to True or False. You can pair these conditional statements with an if/else statement that breaks up the code and only executes parts of the code where conditions are met. test.num &lt;- 30 if (test.num &lt; 10) { print(&quot;small&quot;) } else { print(&quot;big&quot;) } ## [1] &quot;big&quot; 2.3.6 Working with Dataframes The most common data format we will deal with is a dataframe format. This means that data is stored in a 2D array with the rows referring to individual measurements (single patients, samples, cells, etc.) and the columns referring to parameters (genes, proteins, etc.) measured in each individual. my.data &lt;- matrix(data = c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3) my.data ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 We now convert this matrix into a dataframe type. my.data &lt;- as.data.frame(my.data) You can index into a dataframe and pull out one or more cells within the dataframe. my.data[1, 3] ## [1] 7 Yo can pull out multiple elements at a time, specifying which row and column they reside in. my.data[c(1, 2), c(2, 3)] ## V2 V3 ## 1 4 7 ## 2 5 8 my.data[1:2, 2:3] ## V2 V3 ## 1 4 7 ## 2 5 8 If you provide the row and not the column, or vice versa, by default R will pull out all of the available columns and rows respectively. my.data[1:2, ] # pulls out the first two rows and all columns ## V1 V2 V3 ## 1 1 4 7 ## 2 2 5 8 my.data[, 1:2] # pulls out the first two columns and all rows ## V1 V2 ## 1 1 4 ## 2 2 5 ## 3 3 6 It’s possible to also remove elements in a dataframe using the negative sign. my.data[-c(1, 3), ] # removes the first and third rows ## V1 V2 V3 ## 2 2 5 8 There are a few different functions you can use to investigate a dataframe, the size of it, and other aspects. dim(my.data) ## [1] 3 3 We work with a dataframe instead of just a matrix because dataframes can tolerate different datatypes in the same table. The gapminder dataset is a pre-made dataset that we can play around with. library(gapminder) head(gapminder) ## # A tibble: 6 x 6 ## country continent year lifeExp pop gdpPercap ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Afghanistan Asia 1952 28.8 8425333 779. ## 2 Afghanistan Asia 1957 30.3 9240934 821. ## 3 Afghanistan Asia 1962 32.0 10267083 853. ## 4 Afghanistan Asia 1967 34.0 11537966 836. ## 5 Afghanistan Asia 1972 36.1 13079460 740. ## 6 Afghanistan Asia 1977 38.4 14880372 786. We can also generate our own dataframes from vectors that we put together into a table. cats &lt;- data.frame(coat = c(&quot;calico&quot;, &quot;black&quot;, &quot;tabby&quot;), weight = c(2.1, 5.0, 3.2), likes_string = c(1, 0, 1)) cats ## coat weight likes_string ## 1 calico 2.1 1 ## 2 black 5.0 0 ## 3 tabby 3.2 1 You can check what kind of data you are working with using the class and/or typeof functions. class(my.data) # tells you that A is a dataframe ## [1] &quot;data.frame&quot; You can use the following functions to investigate aspects of a given dataset. dim(gapminder) ## [1] 1704 6 colnames(gapminder) ## [1] &quot;country&quot; &quot;continent&quot; &quot;year&quot; &quot;lifeExp&quot; &quot;pop&quot; &quot;gdpPercap&quot; summary(gapminder) ## country continent year lifeExp ## Afghanistan: 12 Africa :624 Min. :1952 Min. :23.60 ## Albania : 12 Americas:300 1st Qu.:1966 1st Qu.:48.20 ## Algeria : 12 Asia :396 Median :1980 Median :60.71 ## Angola : 12 Europe :360 Mean :1980 Mean :59.47 ## Argentina : 12 Oceania : 24 3rd Qu.:1993 3rd Qu.:70.85 ## Australia : 12 Max. :2007 Max. :82.60 ## (Other) :1632 ## pop gdpPercap ## Min. :6.001e+04 Min. : 241.2 ## 1st Qu.:2.794e+06 1st Qu.: 1202.1 ## Median :7.024e+06 Median : 3531.8 ## Mean :2.960e+07 Mean : 7215.3 ## 3rd Qu.:1.959e+07 3rd Qu.: 9325.5 ## Max. :1.319e+09 Max. :113523.1 ## We can try to look at the beginning of a specific column in this dataset. Dataframes that have names for their columns allow you to index into the columns specifically by name using the $ operator as shown below. head(gapminder$continent) ## [1] Asia Asia Asia Asia Asia Asia ## Levels: Africa Americas Asia Europe Oceania You can add new rows and columns using the rbind and cbind functions. cats &lt;- cbind(cats, length = c(2, 3, 1)) cats ## coat weight likes_string length ## 1 calico 2.1 1 2 ## 2 black 5.0 0 3 ## 3 tabby 3.2 1 1 You can also remove rows and columns using the trick with a negative index. cats[, -1] ## weight likes_string length ## 1 2.1 1 2 ## 2 5.0 0 3 ## 3 3.2 1 1 cats[-1, ] ## coat weight likes_string length ## 2 black 5.0 0 3 ## 3 tabby 3.2 1 1 You can merge two dataframes together using the rbind function assuming that their columns match up correctly. newcats &lt;- data.frame(coat = c(&quot;white&quot;, &quot;gold&quot;, &quot;silver&quot;), weight = c(3.1, 5.3, 1.9), likes_string = c(1, 0, 0), length = c(4, 2, 3)) newcats ## coat weight likes_string length ## 1 white 3.1 1 4 ## 2 gold 5.3 0 2 ## 3 silver 1.9 0 3 cats &lt;- rbind(cats, newcats) cats ## coat weight likes_string length ## 1 calico 2.1 1 2 ## 2 black 5.0 0 3 ## 3 tabby 3.2 1 1 ## 4 white 3.1 1 4 ## 5 gold 5.3 0 2 ## 6 silver 1.9 0 3 2.3.7 Type Coercion and Factors ?? cats$coat &lt;- as.factor(cats$coat) ??? cats &lt;- rbind(cats, c(coat = &quot;spotted&quot;, weight = 2.4, likes_string = 0, length = 2.5)) ## Warning in `[&lt;-.factor`(`*tmp*`, ri, value = &quot;spotted&quot;): invalid factor level, ## NA generated cats ## coat weight likes_string length ## 1 calico 2.1 1 2 ## 2 black 5 0 3 ## 3 tabby 3.2 1 1 ## 4 white 3.1 1 4 ## 5 gold 5.3 0 2 ## 6 silver 1.9 0 3 ## 7 &lt;NA&gt; 2.4 0 2.5 cats$coat ## [1] calico black tabby white gold silver &lt;NA&gt; ## Levels: black calico gold silver tabby white What has happened with this new addition? If you tried to add a new cat to the dataframe that had a color that wasn’t already represented in the data, chances are you had a warning and that color was turned to NA. cats$coat ## [1] calico black tabby white gold silver &lt;NA&gt; ## Levels: black calico gold silver tabby white You may have seen certain parts of dataframes are factors with levels. Factors are a special data type that deals with categorical data. They can be handy for certain manipulations or visualizations, but once a factor is created, it doesn’t let you easily add new categories that were not in the original set. The easiest way around this is to treat the column as characters instead of as factors. cats &lt;- rbind(cats, c(coat = &quot;calico&quot;, weight = 3.2, likes_string = 1, length = 3)) as.character(cats$coat) ## [1] &quot;calico&quot; &quot;black&quot; &quot;tabby&quot; &quot;white&quot; &quot;gold&quot; &quot;silver&quot; NA &quot;calico&quot; "],["day-4-tidyverse-and-plots-and-such.html", "3 Day 4 - tidyverse and plots and such 3.1 Reading files 3.2 Making plots with ggplot2", " 3 Day 4 - tidyverse and plots and such Today we’re going ot look at tidyverse and reading files and plots and such 3.1 Reading files irisz &lt;- read.csv(&quot;data/iris.csv&quot;) head(irisz) ## X Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 1 5.1 3.5 1.4 0.2 setosa ## 2 2 4.9 3.0 1.4 0.2 setosa ## 3 3 4.7 3.2 1.3 0.2 setosa ## 4 4 4.6 3.1 1.5 0.2 setosa ## 5 5 5.0 3.6 1.4 0.2 setosa ## 6 6 5.4 3.9 1.7 0.4 setosa 3.2 Making plots with ggplot2 Learning Goals: List the roles of data, aesthetics, and geoms in ggplot functions. Choose the correct aesthetics and alter the geom parameters for a scatter plot, histogram, or box plot. Layer multiple geometries in a single plot. Customize plot scales, titles, subtitles, themes, fonts, layout, and orientation. Apply a facet to a plot. Save a ggplot to a file. 3.2.1 Getting started with a ggplot library(ggplot2) library(tidyverse) We will primarily be working in ggplot2 as it has the greatest degree of customization for visualization and offers many additional features over the basic plotting in R. Most ggplot calls to create a figure take the following form (you can read more using help(ggplot)): ggplot(data = &lt;DATA&gt;, mapping = aes(&lt;MAPPINGS&gt;)) + &lt;GEOM_FUNCTION&gt;() We will practice using our mammalian sleep dataset. You can look up more info about this dataset using the help function and the dataset name, msleep. head(msleep) ## # A tibble: 6 x 11 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cheetah Acin… carni Carn… lc 12.1 NA NA 11.9 ## 2 Owl mo… Aotus omni Prim… &lt;NA&gt; 17 1.8 NA 7 ## 3 Mounta… Aplo… herbi Rode… nt 14.4 2.4 NA 9.6 ## 4 Greate… Blar… omni Sori… lc 14.9 2.3 0.133 9.1 ## 5 Cow Bos herbi Arti… domesticated 4 0.7 0.667 20 ## 6 Three-… Brad… herbi Pilo… &lt;NA&gt; 14.4 2.2 0.767 9.6 ## # … with 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt; You will first use the ggplot() function and bind the plot to a specific data frame using the data argument. ggplot(data = msleep) You will next need to define a mapping (using the aesthetic or aes function), by selecting the variables to be plotted and specifying how to present them in the graph, e.g. as x/y positions or characteristics such as size, shape, color, etc. ggplot(data = msleep, aes(x = brainwt, y = sleep_rem)) You can then add ‘geoms’ – graphical representations of the data in the plot (points, lines, bars). ggplot2 offers many different geoms. We will use some common ones today including: geom_point() for scatter plots, dot plots, etc. geom_boxplot() for, well, boxplots! geom_line() for trend lines, time series, etc. To add a geom to the plot use the + operator. Because we have two continuous variables, let’s use geom_point() first: ggplot(data = msleep, aes(x = brainwt, y = sleep_rem)) + geom_point() To save your work-in-progress, you can assign the plot to a variable. my_plot &lt;- ggplot(data = msleep, aes(x = brainwt, y = sleep_rem)) We can now draw the plot as a scatterplot with points to represent each state. my_plot + geom_point() ## Warning: Removed 35 rows containing missing values (geom_point). ??? msleep2 &lt;- msleep %&gt;% mutate(brainwt_log = log(brainwt)) ggplot(msleep2, aes(x = brainwt_log, y = sleep_rem)) + geom_point() ## Warning: Removed 35 rows containing missing values (geom_point). ??? We can modify the appearance of the plot by changing aspects of the points we plot such as transparency (“alpha”) and color. ggplot(data = msleep2, aes(x = brainwt_log, y = sleep_rem)) + geom_point(alpha = 0.5, color = &quot;blue&quot;) ## Warning: Removed 35 rows containing missing values (geom_point). It is also possible to scale the color of the points by some variable present in the data. ggplot(msleep2, aes(x = brainwt_log, y = sleep_rem, color = vore)) + geom_point() ## Warning: Removed 35 rows containing missing values (geom_point). When generating visualizations, it is important to annotate the figure with meaningful labels on the axes to make them accessible for the viewer. ggplot(msleep2, aes(x = brainwt_log, y = sleep_rem, color = vore)) + geom_point() + labs(x = &quot;Brain Weight (log)&quot;, y = &quot;Duration of REM Sleep&quot;) ## Warning: Removed 35 rows containing missing values (geom_point). 3.2.2 Plotting Numerical vs. Categorical Data We can create histograms in ggplot2 that are more aesthetically pleasing than the default hist function. ggplot(msleep, aes(x = sleep_total)) + geom_histogram(bins = 10) By adding a different parameter to fill in the aes we define throgh the ggplot function, we can separate out histograms according to different groupings such as here where we look at how total sleep distribution is distributed according to feeding behavior. ggplot(msleep, aes(x = sleep_total, fill = vore)) + geom_histogram(bins = 10) We can look at how many individuals in the dataset fall into each category, such as feeding behavior. ggplot(data = msleep, aes(x = vore)) + geom_bar() We can look at how many total sleep distribution is distributed within each category of feeding behavior using separate box plots. ggplot(data = msleep, aes(x = vore, y = sleep_total)) + geom_boxplot() We can even drill down further and separate out another category, so that we can look at each feeding behavior and each conservation status (e.g. how the total sleep duration of domesticated herbivores compares to least concern carnivores). ggplot(msleep, aes(x = vore, y = sleep_total, color = conservation)) + geom_boxplot() 3.2.3 Plotting Error Bars Discrete Variables ggplot(msleep2, aes(x = vore, y = awake)) + geom_bar(stat = “identity”) ggplot(msleep2, aes(x = vore, y = awake)) + geom_bar(stat = “summary”, fun = “median”) Error Bars ggplot(df, aes(x,y)) + geom_bar(blahblah) + geom_errorbar() you could do this, but then you need to have pre-calculated the mean value for each group and the SE in your data feeding.data &lt;- msleep2 %&gt;% group_by(vore) %&gt;% summarize(mean_se(awake)) feeding.data What does mean_se do? ?mean_se y is the mean ymin is mean - one SE ymax is mean + one SE ggplot(feeding.data, aes(x = vore, y = y)) + geom_bar(stat = “identity”) ggplot(feeding.data, aes(x = vore, y = y)) + geom_bar(stat = “identity”) + geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2) 3.2.4 Plotting Trends in Big Data Lots of these different figures summarize or aggregate the data. We may want to display the data with the individual points, but still show the overall trend across the data. ggplot(data = msleep2, mapping = aes(x = brainwt_log, y = sleep_rem)) + geom_bin2d() + geom_density_2d() + geom_point() We can add a trendline with geom_smooth that you can check using help(geom_smooth). ggplot(data = msleep2, mapping = aes(x = brainwt_log, y = sleep_rem)) + geom_point(alpha = 0.5) + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; msleep3 &lt;- msleep2 %&gt;% mutate(bodywt_log = log(bodywt)) my.plot &lt;- ggplot(msleep3, aes(x = brainwt_log, y = bodywt_log)) + geom_point() my.plot We can also do this with trendlines that summarize only certain subsets of the data, such as ? ggplot(data = msleep2, mapping = aes(x = brainwt_log, y = sleep_rem)) + geom_smooth(aes(color = vore)) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; The above plot reflects the trends, but makes it hard to see the data that is contributing to each trend line. These differences can be most easily seen using facet_wrap or facetting that splits the figure into separate panel where the data has been filtered by the category (i.e. ?). ggplot(data = msleep2, mapping = aes(x = brainwt_log, y = sleep_rem)) + geom_point() + geom_smooth(aes(color = vore)) + facet_wrap( ~ vore) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 3.2.5 Saving Your Figures If you want to save your images as a local individual file on your computer, there are two easy ways to do that. The first method uses ggsave to save the most recent ggplot figure you generated. ggplot(msleep2, aes(x = brainwt_log, y = sleep_rem)) + geom_point() + geom_smooth(method = &quot;lm&quot;) ggsave(&quot;plot.png&quot;, width = 5, height = 5) This function will save wherever your directory is currently. Check with getwd() and change with setwd(folder name). You can also provide a precise file path in the new file name. ggsave(&quot;~/Downloads/plot.png&quot;, width = 5, height = 5) Here is an alternative method for saving your figures: pdf(&quot;plot.pdf&quot;) # creates the file # png() also works if you want a different file format ggplot(msleep2, aes(x = brainwt_log, y = sleep_rem)) + geom_point() + geom_smooth(method = &quot;lm&quot;) dev.off() # finishes editing the file Any changes to the figure that are contained between the initial creation of the figure (i.e. the pdf command) and the dev.off command will be included in the final saved image. However, the figure is being printed directly to the file it is writing and won’t appear elsewhere. "],["day-5-building-workflows.html", "4 Day 5 - building workflows 4.1 Using code many times - loops 4.2 Writing (re)usable code 4.3 Writing modular code 4.4 Packages are chunks of code (and sometimes data) 4.5 Finding more help and documentation 4.6 Reproducibility and sharing 4.7 Reproducibility and sharing 4.8 Finding more help and documentation 4.9 Reproducibility and sharing", " 4 Day 5 - building workflows We’re gonna build workflows Firstly, let’s review the last two days. What have we done and how do we do it again? Crack open your code - can you use it again? Can you adapt it to modify your question, feed in new data, and modify the scientifically-important bits easily? 4.1 Using code many times - loops Doing lots of stuff - loops (Darach) show list.files() - challenge is to analyze a bunch of ….. ? protein seqs? could evaluate the claim that four basic amino acids in a row is unusual for SARS2 (ever seen a NLS?) Loops How to think about a for loop Specifically in context of processing multiple files, so list.files() ? Students know that other control structures exist (do, while), and that they’re controlled by boolean logic Apply is a thing Scholars will be familiar with that folks have strong opinions about using apply instead of for loops Scholars will understand that getting the code done is the most important thing, but that good use of apply can be something to develop later to make code run faster, cleaner Scholars will be able to read what an example of apply or s/lapply is doing, so that they can read examples online Scholars will have heard the term “lambda function” ? Scholars will understand that functions can be one-off (ie lambda, function(x){} ), and that’s okay 4.2 Writing (re)usable code Crack open your code - can you use it again? Can you adapt it to modify your question, feed in new data, and modify the scientifically-important bits easily? Let’s look at two chunks of code from a paper (lightly edited). The experiment is counting barcoded lineages of yeast cells to estimate “PPIs” (protein-protein interactions)1. here’s an example of one style of writing R script: # filter out bad barcode lineages ( &lt;= 2 time points counts &gt; 0, or maximum of each time point &lt;= 5 or total counts of a lineage &lt; 10) bad_index = rep(0, nrow(DBC_known_counts)) for(i in 1:length(bad_index)){ counts = as.numeric(DBC_known_counts[i, 4:8]) if (length(which(counts != 0)) &lt; 3 | max(counts) &lt; 5 | sum(counts) &lt; 10){ bad_index[i] = 1 } } length(which(bad_index == 1)) # 1447775 What is going on here? How do you feed in new data? How do you run this multiple times? How do you change the logic? Here’s another example from the same author: H202_Output &lt;- PPI_calling_sigmoid( PPI_multiple=dataFrameReader_T(&quot;/Volumes/zmliu_02/PPiseq_03/H2O2/counts/PPI_multiple_p.values.csv&quot;), specific_PPV=c(seq(0.5,0.58,by=0.02),seq(0.6,0.8,by=0.01),seq(0.82,0.9,by=0.02)), Fitness=fitness(0,1,0.01), p_value=seq(-4,0,0.1), Neg_number_PPI=6e4, Neg_ref_number=50, p_threshold=-4 p_loc=6, ) Same questions. 4.2.1 Style guides can be inspiring tidyverse style guide google-specific changes Jean Fan’s search for “R style guide” 4.2.2 What style should you use? Be inconsistently consistent! Balance for yourself: How easy is it to write? How easy is it for you to read? How easy is it for others to read? How similar is it to what everyone else is doing (a very good thing)? But most importantly, use what folks around you are using. Be lazy, imitate others. How would you describe your code writing style? How do you name things? How good are your comments? What elements would you like to incorporate? 4.3 Writing modular code What is modularity of code? Why? think more clearly than “hardcoding” stuff change things more easily without forgetting everything lets you operate at a higher level, by tweaking parameters in one place 4.3.1 Calculating standard error Let’s calculate the standard error of a sample of values: values &lt;- c(4,3,2,2,5,3,6,2,2,4) stderr(values) ## Error in stderr(values): unused argument (values) Er … what? What is stderr doing? ?stderr Write out the maths for the standard error of the mean calcuate it sd(values)/sqrt(length(values)-1) ## [1] 0.4727122 write a function that does it what do we save it as? test it 4.3.2 More complex modules More examples/exercise show a simulation of something…. genetic drift of a virus replicating? lineage G1312F exercise - wrap the entire analysis as a function talk about ease of calling gotcha about print() the plots exercise - make a parameter and argument ease of tweaking this exercise - break into subfunctions, generate and plot ease of changing models 4.4 Packages are chunks of code (and sometimes data) Let’s take a look at your code from the last few days. How would you share this with the other people in the course? R, like other languages, is built on a package system - if you wrap up your code in particular expected ways and put it in particular expected places, it is very easy for others to get and use your code side note link for interested students, easy of making pakcages (for advanced advanced) 4.4.1 first stop - CRAN CRAN library(&quot;stringdist&quot;) exercise - get the stringdist library, use it exercise - get a new viz layer, use it 4.4.2 How does this package work? ? ?? etc 4.4.3 next stop - github library(&quot;devtools&quot;) or remotes? exercise - pull a package off github… ? maybe some sort of viz again? Exercise - install a package from github and learn how to use it Ghibli color palette Sports field plotting Ridgeplots in ggplot2 problems with this - security, eh 4.4.4 finally - Bioconductor 😬 How to install Bioconductor Scholars will know how to install Bioconductor package from CRAN Scholars will know how to find and install packages from Bioconductor explore the namespace for a package, ie ?packagename:: and TAB or ?packagename:: how to print out all the packages you have loaded 4.5 Finding more help and documentation Need a problem ?geom_line ?stringdist Objective X.X: Scholars will know how to get official docs ( ? ) and how to skim/read these Objective X.X: Scholars will see how easy it is to use a search engine to try and find other answers Objective X.X: Scholars will understand the intention of the Slack being a learning community, or something (set expectations about this) Source up problems from the class? Demo a weird plot idea, search for how to do it on stack overflow? Maybe how to change the color of facet labels in a ggplot facet graph, that’s a bit tricky and demonstrates why base R is important… 4.6 Reproducibility and sharing think about this think about the next person coming along, or yourself in 3 months links on syllabus for more info all sorts of automated stuff you can do 4.7 Reproducibility and sharing what are these concepts why the hell we want others to use our code? Well I’ll tell you why - the general intellect think about this think about the next person coming along, or yourself in 3 months links on syllabus for more info all sorts of automated stuff you can do 4.8 Finding more help and documentation Need a problem ?geom_line ?stringdist Objective X.X: Scholars will know how to get official docs ( ? ) and how to skim/read these Objective X.X: Scholars will see how easy it is to use a search engine to try and find other answers Objective X.X: Scholars will understand the intention of the Slack being a learning community, or something (set expectations about this) Source up problems from the class? Demo a weird plot idea, search for how to do it on stack overflow? Maybe how to change the color of facet labels in a ggplot facet graph, that’s a bit tricky and demonstrates why base R is important… 4.9 Reproducibility and sharing think about this think about the next person coming along, or yourself in 3 months links on syllabus for more info all sorts of automated stuff you can do Ask Darach if you want details, or read the paper.↩ "],["appendix.html", "5 Appendix 5.1 Additional tutorials 5.2 More challenges 5.3 Figures ideas 5.4 Rmd example of code chunk 5.5 More example Rmds 5.6 How to edit this document 5.7 More links", " 5 Appendix Useful bits 5.1 Additional tutorials a list of tutorials 5.1.1 sub sub section 5.2 More challenges Challenge yourself Extra datasets ere 5.3 Figures ideas An interactive page showing different types of figures A R graph gallery 5.4 Rmd example of code chunk knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 5.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa 5.5 More example Rmds extraRmds/worksheet.Rmd 5.6 How to edit this document Here is a too-long video about how to edit this website. Each level 1 header is its own heading the left TOC 5.6.1 Setup Clone the repo locally git clone https://github.com/darachm/dll-r 5.6.2 Edit/work on it git pull so you’re current! Error with what is in docs/? Do git checkout docs/ to remove the edits to those, then pull again. Make or edit the files whose name starts with two digits and ends with Rmd, Like 01-day3.Rmd. Feel free to run that in Rstudio or whatever. To test the full site, sun ./_build.sh to build the entire site. ( Can Rstudio run this as a terminal ??? There may be another way to do this in Rstudio - I believe they develop the bookdown package? ) The entire site is in docs/ because that is what github wants. When done, add and commit your changes. git add 02-day4.Rmd # or whatever you changed git commit -m &quot;nice commit message of what you have done&quot; git checkout docs/ # this prevents errors from docs not matching what&#39;s published git pull # to make sure current git push # to push it up to github 5.6.3 Publishing onto the main page, so it’s hosted at the URL git pull # to make sure current # if there are conflicts, then run git checkout docs/ # this prevents errors from docs not matching what&#39;s published # if not, you can skip this step! ./_build.sh # builds the site in docs/ git add docs/* # adds the entire site to the repo git commit -m &quot;updated site&quot; git push # to push it up to github 5.7 More links Claus Wilke’s dataviz bookdown "]]

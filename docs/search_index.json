[["index.html", "DLL 2021 R section syllabus 1 Intro 1.1 How to edit, for now", " DLL 2021 R section syllabus darachm etc 2021-05-31 1 Intro Yo. Expectations 1.1 How to edit, for now Here is a too-long video about how to edit this website. Each level 1 header is its own heading the left TOC 1.1.1 Setup Clone the repo locally git clone https://github.com/darachm/dll-r 1.1.2 Edit/work on it git pull so you’re current! Error with what is in docs/? Do git checkout docs/ to remove the edits to those, then pull again. Make or edit the files whose name starts with two digits and ends with Rmd, Like 01-day3.Rmd. Feel free to run that in Rstudio or whatever. To test the full site, sun ./_build.sh to build the entire site. ( Can Rstudio run this as a terminal ??? There may be another way to do this in Rstudio - I believe they develop the bookdown package? ) The entire site is in docs/ because that is what github wants. When done, add and commit your changes. git add 02-day4.Rmd # or whatever you changed git commit -m &quot;nice commit message of what you have done&quot; git checkout docs/ # this prevents errors from docs not matching what&#39;s published git pull # to make sure current git push # to push it up to github 1.1.3 Publishing onto the main page, so it’s hosted at the URL git checkout docs/ # this prevents errors from docs not matching what&#39;s published git pull # to make sure current ./_build.sh # builds the site in docs/ git add docs/* # adds the entire site to the repo git commit -m &quot;updated site&quot; git push # to push it up to github "],["day-4-into-to-r.html", "2 Day 4 - into to R", " 2 Day 4 - into to R Day 4: Automation, workflows, Loops and apply? Loops for automating workflow Enough use of loops How to use apply very basically, survival skills ( apply df,2,mean) or something ) Reading documentation - using ? Functions - Creating functions - arguments for new functions - Using packages - How to find and install CRAN - How to find and install Bioconductor - How to find and install stuff from git Sharing code - .R , .Rmd , git Testing code and troubleshooting Grand finale: Take a CSV dataset and turn it into an appropriate ggplot figure "],["day-2-tidy-plots.html", "3 Day 2 - tidy plots", " 3 Day 2 - tidy plots Day 2: Using ggplot2 Install ggplot package Understanding the general theory of ggplot ( data into aes into geoms ) Different kinds of plot (geom_bar, geom_hist, geom_point) Discrete vs. continuous plots Trendlines (geom_smooth) How to find new plot styles (ie demo searching for plots, show plot gallery websites) Facets (maybe just for students who want challenge) Data processing (getting started from a file) Previewing data and looking for issues Normalizing data Dealing with NAs, Transforming Data Types, Scaling Values, Filtering Values What is a tibble() What is a pipe, piping functions together Tidyverse for group_by and summarise Statistical ideas for analyzing data Fit a lm() regression model of two vectors, or two columns of dataframe, get a summary of these Interpreting summary statistics Uncertainty and significance Error bars and confidence intervals Visualizing and interpreting this "],["day-5-boring-stuff.html", "4 Day 5 - boring stuff", " 4 Day 5 - boring stuff Day 5: Building an effective workflow Intro: Day 5 Objective: At the end of this day, scholars will have the resources to choose an effective workflow for themselves, including code organization, scaling analyses (loops &amp; functions), and using popular R compatible tools share code (e.g. github), and communicate results (e.g. Rmarkdown, Rshiny, plotly). Scaling up code stuff with loops and functions. Package management (Darach) Objective X.X: Scholars will understand that packages are how repeatedly useful code is shared in the community, and be able to install and load packages from CRAN, Bioconductor, and Github Scholars will understand that there are multiple repos, and that is good, but CRAN is the One True Repo Scholars will know how to Install devtools from CRAN Scholars will know how to use devtools to install from github Scholars will know how to install Bioconductor package from CRAN Scholars will know how to find and install packages from Bioconductor Scholars will know how to explore the namespace for a package, ie ?packagename:: and TAB or ?packagename:: Writing modular code with functions (Darach/Melissa) Objective X.X: Scholars will begin to understand the value of “functional”/“modular” code, ie writing a function to do things, and will understand how to write a basic function Exercise Present a missing functionality in R : standard err (I think that’s the one?) Write code to copy paste to do this Then write a function to do that, and it looks a lot more tidy Scholars will understand that functions can be one-off (ie lambda, function(x){} ), and that’s okay Doing lots of stuff - loops (Darach) Loops How to think about a for loop Students can write a for loop Specifically in context of processing multiple files, so list.files() ? Students know that other control structures exist (do, while), and that they’re controlled by boolean logic Apply is a thing Scholars will be familiar with that folks have strong opinions about using apply instead of for loops Scholars will understand that getting the code done is the most important thing, but that good use of apply can be something to develop later to make code run faster, cleaner Scholars will be able to read what an example of apply or s/lapply is doing, so that they can read examples online Scholars will have heard the term “lambda function” ? Getting advanced help and documentation (Darach) Objective X.X: Scholars will know how to get official docs ( ? ) and how to skim/read these Objective X.X: Scholars will see how easy it is to use a search engine to try and find other answers Objective X.X: Scholars will understand the intention of the Slack being a learning community, or something (set expectations about this) Source up problems from the class? Demo a weird plot idea, search for how to do it on stack overflow? Maybe how to change the color of facet labels in a ggplot facet graph, that’s a bit tricky and demonstrates why base R is important… knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 4.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa "],["appendix.html", "5 Appendix 5.1 Additional tutorials 5.2 More challenges 5.3 Rmd example of code chunk", " 5 Appendix 5.1 Additional tutorials a list of tutorials 5.1.1 sub sub section 5.2 More challenges Challenge yourself Extra datasets ere 5.3 Rmd example of code chunk knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 5.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa "]]

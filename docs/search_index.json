[["index.html", "DLL 2021, R section 1 Workshop introduction 1.1 Course intent 1.2 Structure and resources 1.3 Expectations", " DLL 2021, R section darachm etc? etc? etc? 2021-06-03 1 Workshop introduction 1.1 Course intent Here is what the course is trying to do. We want to get you to a basic framework so you can work with someone effectively. That framework is getting you oriented with the basics and how to think about figuring out tasks in R. 1.2 Structure and resources 1.2.1 This syllabus and videos We’ve made this doc for your reference, and it’s our living document of “slides” and reference. We also made short videos for teaching, so that any mini-lectures are concise and complete. It also allows us to work as assistants. These are uploaded on Youtube, and should be accessible via the embeds on this site. 1.2.2 Slack channel We are going to set this up to be a good place to go for ideas/help. The channel is called …. what? 1.3 Expectations Don’t be a jerk Pull together "],["day-3-intoduction-to-r.html", "2 Day 3 - intoduction to R 2.1 Rstudio, and basics 2.2 Data exploration pipelines", " 2 Day 3 - intoduction to R Rstudio etc 2.1 Rstudio, and basics Rstudio 1 ## [1] 1 x &lt;- 1 x = 1 x &lt;- 1 “Scoping”[^scoping] is a term that you can really get into, but for now, just use &lt;-[^arrow-other-way]. [^scoping] : oh boy computer science here [^arrow-other-way] : you can also go the other way, like 1 -&gt; x, but nobody does that 2.2 Data exploration pipelines Approach: an Rmd tutorial with a simple dataset in R. This is meant to be a motivation for what one can do in R, not necessarily understanding syntax of every function/operation used Topics/Exercises Present a conceptual framework for a pipeline - more of a tutorial Use an Rmd file for this and introduce how to navigate the Rmd file Scholars can execute a given Rmd Scholars can modify a given Rmd Scholars know what the major pieces of an Rmd are (code and not code) Scholars know about caching and arguments for code chunks Scholars know how to make their own new Rmd file and run it Load a simple dataset in R - the iris dataset, peek at the table with head, summarize the columns, and make a scatter plot with base R. This introduces several topics Requires: interacting with R, calling functions, and saving variables "],["day-4-tidyverse-and-plots-and-such.html", "3 Day 4 - tidyverse and plots and such 3.1 Reading files 3.2 Making plots with ggplot2", " 3 Day 4 - tidyverse and plots and such Today we’re going ot look at tidyverse and reading files and plots and such 3.1 Reading files irisz &lt;- read.csv(&quot;data/iris.csv&quot;) head(irisz) ## X Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 1 5.1 3.5 1.4 0.2 setosa ## 2 2 4.9 3.0 1.4 0.2 setosa ## 3 3 4.7 3.2 1.3 0.2 setosa ## 4 4 4.6 3.1 1.5 0.2 setosa ## 5 5 5.0 3.6 1.4 0.2 setosa ## 6 6 5.4 3.9 1.7 0.4 setosa 3.2 Making plots with ggplot2 Learning Goals: List the roles of data, aesthetics, and geoms in ggplot functions. Choose the correct aesthetics and alter the geom parameters for a scatter plot, histogram, or box plot. Layer multiple geometries in a single plot. Customize plot scales, titles, subtitles, themes, fonts, layout, and orientation. Apply a facet to a plot. Save a ggplot to a file. 3.2.1 Getting started with a ggplot library(ggplot2) library(tidyverse) We will primarily be working in ggplot2 as it has the greatest degree of customization for visualization and offers many additional features over the basic plotting in R. Most ggplot calls to create a figure take the following form (you can read more using help(ggplot)): ggplot(data = &lt;DATA&gt;, mapping = aes(&lt;MAPPINGS&gt;)) + &lt;GEOM_FUNCTION&gt;() We will practice using our mammalian sleep dataset. You can look up more info about this dataset using the help function and the dataset name, msleep. head(msleep) ## # A tibble: 6 x 11 ## name genus vore order conservation sleep_total sleep_rem sleep_cycle awake ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Cheetah Acin… carni Carn… lc 12.1 NA NA 11.9 ## 2 Owl mo… Aotus omni Prim… &lt;NA&gt; 17 1.8 NA 7 ## 3 Mounta… Aplo… herbi Rode… nt 14.4 2.4 NA 9.6 ## 4 Greate… Blar… omni Sori… lc 14.9 2.3 0.133 9.1 ## 5 Cow Bos herbi Arti… domesticated 4 0.7 0.667 20 ## 6 Three-… Brad… herbi Pilo… &lt;NA&gt; 14.4 2.2 0.767 9.6 ## # … with 2 more variables: brainwt &lt;dbl&gt;, bodywt &lt;dbl&gt; You will first use the ggplot() function and bind the plot to a specific data frame using the data argument. ggplot(data = msleep) You will next need to define a mapping (using the aesthetic or aes function), by selecting the variables to be plotted and specifying how to present them in the graph, e.g. as x/y positions or characteristics such as size, shape, color, etc. ggplot(data = msleep, aes(x = brainwt, y = sleep_rem)) You can then add ‘geoms’ – graphical representations of the data in the plot (points, lines, bars). ggplot2 offers many different geoms. We will use some common ones today including: geom_point() for scatter plots, dot plots, etc. geom_boxplot() for, well, boxplots! geom_line() for trend lines, time series, etc. To add a geom to the plot use the + operator. Because we have two continuous variables, let’s use geom_point() first: ggplot(data = msleep, aes(x = brainwt, y = sleep_rem)) + geom_point() To save your work-in-progress, you can assign the plot to a variable. my_plot &lt;- ggplot(data = msleep, aes(x = brainwt, y = sleep_rem)) We can now draw the plot as a scatterplot with points to represent each state. my_plot + geom_point() ## Warning: Removed 35 rows containing missing values (geom_point). ??? msleep2 &lt;- msleep %&gt;% mutate(brainwt_log = log(brainwt)) ggplot(msleep2, aes(x = brainwt_log, y = sleep_rem)) + geom_point() ## Warning: Removed 35 rows containing missing values (geom_point). ??? We can modify the appearance of the plot by changing aspects of the points we plot such as transparency (“alpha”) and color. ggplot(data = msleep2, aes(x = brainwt_log, y = sleep_rem)) + geom_point(alpha = 0.5, color = &quot;blue&quot;) ## Warning: Removed 35 rows containing missing values (geom_point). It is also possible to scale the color of the points by some variable present in the data. ggplot(msleep2, aes(x = brainwt_log, y = sleep_rem, color = vore)) + geom_point() ## Warning: Removed 35 rows containing missing values (geom_point). When generating visualizations, it is important to annotate the figure with meaningful labels on the axes to make them accessible for the viewer. ggplot(msleep2, aes(x = brainwt_log, y = sleep_rem, color = vore)) + geom_point() + labs(x = &quot;Brain Weight (log)&quot;, y = &quot;Duration of REM Sleep&quot;) ## Warning: Removed 35 rows containing missing values (geom_point). 3.2.2 Plotting Numerical vs. Categorical Data We can create histograms in ggplot2 that are more aesthetically pleasing than the default hist function. ggplot(msleep, aes(x = sleep_total)) + geom_histogram(bins = 10) By adding a different parameter to fill in the aes we define throgh the ggplot function, we can separate out histograms according to different groupings such as here where we look at how total sleep distribution is distributed according to feeding behavior. ggplot(msleep, aes(x = sleep_total, fill = vore)) + geom_histogram(bins = 10) We can look at how many individuals in the dataset fall into each category, such as feeding behavior. ggplot(data = msleep, aes(x = vore)) + geom_bar() We can look at how many total sleep distribution is distributed within each category of feeding behavior using separate box plots. ggplot(data = msleep, aes(x = vore, y = sleep_total)) + geom_boxplot() We can even drill down further and separate out another category, so that we can look at each feeding behavior and each conservation status (e.g. how the total sleep duration of domesticated herbivores compares to least concern carnivores). ggplot(msleep, aes(x = vore, y = sleep_total, color = conservation)) + geom_boxplot() 3.2.3 Plotting Error Bars Discrete Variables ggplot(msleep2, aes(x = vore, y = awake)) + geom_bar(stat = “identity”) ggplot(msleep2, aes(x = vore, y = awake)) + geom_bar(stat = “summary”, fun = “median”) Error Bars ggplot(df, aes(x,y)) + geom_bar(blahblah) + geom_errorbar() you could do this, but then you need to have pre-calculated the mean value for each group and the SE in your data feeding.data &lt;- msleep2 %&gt;% group_by(vore) %&gt;% summarize(mean_se(awake)) feeding.data What does mean_se do? ?mean_se y is the mean ymin is mean - one SE ymax is mean + one SE ggplot(feeding.data, aes(x = vore, y = y)) + geom_bar(stat = “identity”) ggplot(feeding.data, aes(x = vore, y = y)) + geom_bar(stat = “identity”) + geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2) 3.2.4 Plotting Trends in Big Data Lots of these different figures summarize or aggregate the data. We may want to display the data with the individual points, but still show the overall trend across the data. ggplot(data = msleep2, mapping = aes(x = brainwt_log, y = sleep_rem)) + geom_bin2d() + geom_density_2d() + geom_point() ## Warning: Removed 35 rows containing non-finite values (stat_bin2d). ## Warning: Removed 35 rows containing non-finite values (stat_density2d). ## Warning: Removed 35 rows containing missing values (geom_point). We can add a trendline with geom_smooth that you can check using help(geom_smooth). ggplot(data = msleep2, mapping = aes(x = brainwt_log, y = sleep_rem)) + geom_point(alpha = 0.5) + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ## Warning: Removed 35 rows containing non-finite values (stat_smooth). ## Warning: Removed 35 rows containing missing values (geom_point). msleep3 &lt;- msleep2 %&gt;% mutate(bodywt_log = log(bodywt)) my.plot &lt;- ggplot(msleep3, aes(x = brainwt_log, y = bodywt_log)) + geom_point() my.plot ## Warning: Removed 27 rows containing missing values (geom_point). We can also do this with trendlines that summarize only certain subsets of the data, such as ? ggplot(data = msleep2, mapping = aes(x = brainwt_log, y = sleep_rem)) + geom_smooth(aes(color = vore)) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ## Warning: Removed 35 rows containing non-finite values (stat_smooth). ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : span too small. fewer data values than degrees of freedom. ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : pseudoinverse used at -8.323 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : neighborhood radius 1.5975 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : reciprocal condition number 0 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : There are other near singularities as well. 31.667 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : span too small. fewer ## data values than degrees of freedom. ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at ## -8.323 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius ## 1.5975 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : reciprocal condition ## number 0 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : There are other near ## singularities as well. 31.667 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : span too small. fewer data values than degrees of freedom. ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : pseudoinverse used at -8.0372 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : neighborhood radius 2.228 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : reciprocal condition number 0 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : There are other near singularities as well. 3.8678 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : span too small. fewer ## data values than degrees of freedom. ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at ## -8.0372 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius ## 2.228 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : reciprocal condition ## number 0 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : There are other near ## singularities as well. 3.8678 ## Warning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning - ## Inf ## Warning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning - ## Inf The above plot reflects the trends, but makes it hard to see the data that is contributing to each trend line. These differences can be most easily seen using facet_wrap or facetting that splits the figure into separate panel where the data has been filtered by the category (i.e. ?). ggplot(data = msleep2, mapping = aes(x = brainwt_log, y = sleep_rem)) + geom_point() + geom_smooth(aes(color = vore)) + facet_wrap( ~ vore) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; ## Warning: Removed 35 rows containing non-finite values (stat_smooth). ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : span too small. fewer data values than degrees of freedom. ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : pseudoinverse used at -8.323 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : neighborhood radius 1.5975 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : reciprocal condition number 0 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : There are other near singularities as well. 31.667 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : span too small. fewer ## data values than degrees of freedom. ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at ## -8.323 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius ## 1.5975 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : reciprocal condition ## number 0 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : There are other near ## singularities as well. 31.667 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : span too small. fewer data values than degrees of freedom. ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : pseudoinverse used at -8.0372 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : neighborhood radius 2.228 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : reciprocal condition number 0 ## Warning in simpleLoess(y, x, w, span, degree = degree, parametric = ## parametric, : There are other near singularities as well. 3.8678 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : span too small. fewer ## data values than degrees of freedom. ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : pseudoinverse used at ## -8.0372 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : neighborhood radius ## 2.228 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : reciprocal condition ## number 0 ## Warning in predLoess(object$y, object$x, newx = if ## (is.null(newdata)) object$x else if (is.data.frame(newdata)) ## as.matrix(model.frame(delete.response(terms(object)), : There are other near ## singularities as well. 3.8678 ## Warning: Removed 35 rows containing missing values (geom_point). ## Warning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning - ## Inf ## Warning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning - ## Inf 3.2.5 Saving Your Figures If you want to save your images as a local individual file on your computer, there are two easy ways to do that. The first method uses ggsave to save the most recent ggplot figure you generated. ggplot(msleep2, aes(x = brainwt_log, y = sleep_rem)) + geom_point() + geom_smooth(method = &quot;lm&quot;) ggsave(&quot;plot.png&quot;, width = 5, height = 5) This function will save wherever your directory is currently. Check with getwd() and change with setwd(folder name). You can also provide a precise file path in the new file name. ggsave(&quot;~/Downloads/plot.png&quot;, width = 5, height = 5) Here is an alternative method for saving your figures: pdf(&quot;plot.pdf&quot;) # creates the file # png() also works if you want a different file format ggplot(msleep2, aes(x = brainwt_log, y = sleep_rem)) + geom_point() + geom_smooth(method = &quot;lm&quot;) dev.off() # finishes editing the file Any changes to the figure that are contained between the initial creation of the figure (i.e. the pdf command) and the dev.off command will be included in the final saved image. However, the figure is being printed directly to the file it is writing and won’t appear elsewhere. "],["day-5-building-workflows.html", "4 Day 5 - building workflows 4.1 Using code many times - loops 4.2 Writing (re)usable code 4.3 Writing modular code 4.4 Packages are chunks of code (and sometimes data) 4.5 Finding more help and documentation 4.6 Reproducibility and sharing 4.7 Reproducibility and sharing 4.8 Finding more help and documentation 4.9 Reproducibility and sharing", " 4 Day 5 - building workflows We’re gonna build workflows Firstly, let’s review the last two days. What have we done and how do we do it again? Crack open your code - can you use it again? Can you adapt it to modify your question, feed in new data, and modify the scientifically-important bits easily? 4.1 Using code many times - loops Doing lots of stuff - loops (Darach) show list.files() - challenge is to analyze a bunch of ….. ? protein seqs? could evaluate the claim that four basic amino acids in a row is unusual for SARS2 (ever seen a NLS?) Loops How to think about a for loop Specifically in context of processing multiple files, so list.files() ? Students know that other control structures exist (do, while), and that they’re controlled by boolean logic Apply is a thing Scholars will be familiar with that folks have strong opinions about using apply instead of for loops Scholars will understand that getting the code done is the most important thing, but that good use of apply can be something to develop later to make code run faster, cleaner Scholars will be able to read what an example of apply or s/lapply is doing, so that they can read examples online Scholars will have heard the term “lambda function” ? Scholars will understand that functions can be one-off (ie lambda, function(x){} ), and that’s okay 4.2 Writing (re)usable code Crack open your code - can you use it again? Can you adapt it to modify your question, feed in new data, and modify the scientifically-important bits easily? Let’s look at two chunks of code from a paper (lightly edited). The experiment is counting barcoded lineages of yeast cells to estimate “PPIs” (protein-protein interactions)1. here’s an example of one style of writing R script: # filter out bad barcode lineages ( &lt;= 2 time points counts &gt; 0, or maximum of each time point &lt;= 5 or total counts of a lineage &lt; 10) bad_index = rep(0, nrow(DBC_known_counts)) for(i in 1:length(bad_index)){ counts = as.numeric(DBC_known_counts[i, 4:8]) if (length(which(counts != 0)) &lt; 3 | max(counts) &lt; 5 | sum(counts) &lt; 10){ bad_index[i] = 1 } } length(which(bad_index == 1)) # 1447775 What is going on here? How do you feed in new data? How do you run this multiple times? How do you change the logic? Here’s another example from the same author: H202_Output &lt;- PPI_calling_sigmoid( PPI_multiple=dataFrameReader_T(&quot;/Volumes/zmliu_02/PPiseq_03/H2O2/counts/PPI_multiple_p.values.csv&quot;), specific_PPV=c(seq(0.5,0.58,by=0.02),seq(0.6,0.8,by=0.01),seq(0.82,0.9,by=0.02)), Fitness=fitness(0,1,0.01), p_value=seq(-4,0,0.1), Neg_number_PPI=6e4, Neg_ref_number=50, p_threshold=-4 p_loc=6, ) Same questions. 4.2.1 Style guides can be inspiring tidyverse style guide google-specific changes Jean Fan’s search for “R style guide” 4.2.2 What style should you use? Be inconsistently consistent! Balance for yourself: How easy is it to write? How easy is it for you to read? How easy is it for others to read? How similar is it to what everyone else is doing (a very good thing)? But most importantly, use what folks around you are using. Be lazy, imitate others. How would you describe your code writing style? How do you name things? How good are your comments? What elements would you like to incorporate? 4.3 Writing modular code What is modularity of code? Why? think more clearly than “hardcoding” stuff change things more easily without forgetting everything lets you operate at a higher level, by tweaking parameters in one place 4.3.1 Calculating standard error Let’s calculate the standard error of a sample of values: values &lt;- c(4,3,2,2,5,3,6,2,2,4) stderr(values) ## Error in stderr(values): unused argument (values) Er … what? What is stderr doing? ?stderr Write out the maths for the standard error of the mean calcuate it sd(values)/sqrt(length(values)-1) ## [1] 0.4727122 write a function that does it what do we save it as? test it 4.3.2 More complex modules More examples/exercise show a simulation of something…. genetic drift of a virus replicating? lineage G1312F exercise - wrap the entire analysis as a function talk about ease of calling gotcha about print() the plots exercise - make a parameter and argument ease of tweaking this exercise - break into subfunctions, generate and plot ease of changing models 4.4 Packages are chunks of code (and sometimes data) Let’s take a look at your code from the last few days. How would you share this with the other people in the course? R, like other languages, is built on a package system - if you wrap up your code in particular expected ways and put it in particular expected places, it is very easy for others to get and use your code side note link for interested students, easy of making pakcages (for advanced advanced) 4.4.1 first stop - CRAN CRAN library(&quot;stringdist&quot;) exercise - get the stringdist library, use it exercise - get a new viz layer, use it 4.4.2 How does this package work? ? ?? etc 4.4.3 next stop - github library(&quot;devtools&quot;) or remotes? exercise - pull a package off github… ? maybe some sort of viz again? Exercise - install a package from github and learn how to use it Ghibli color palette Sports field plotting Ridgeplots in ggplot2 problems with this - security, eh 4.4.4 finally - Bioconductor 😬 How to install Bioconductor Scholars will know how to install Bioconductor package from CRAN Scholars will know how to find and install packages from Bioconductor explore the namespace for a package, ie ?packagename:: and TAB or ?packagename:: how to print out all the packages you have loaded 4.5 Finding more help and documentation Need a problem ?geom_line ?stringdist Objective X.X: Scholars will know how to get official docs ( ? ) and how to skim/read these Objective X.X: Scholars will see how easy it is to use a search engine to try and find other answers Objective X.X: Scholars will understand the intention of the Slack being a learning community, or something (set expectations about this) Source up problems from the class? Demo a weird plot idea, search for how to do it on stack overflow? Maybe how to change the color of facet labels in a ggplot facet graph, that’s a bit tricky and demonstrates why base R is important… 4.6 Reproducibility and sharing think about this think about the next person coming along, or yourself in 3 months links on syllabus for more info all sorts of automated stuff you can do 4.7 Reproducibility and sharing what are these concepts why the hell we want others to use our code? Well I’ll tell you why - the general intellect think about this think about the next person coming along, or yourself in 3 months links on syllabus for more info all sorts of automated stuff you can do 4.8 Finding more help and documentation Need a problem ?geom_line ?stringdist Objective X.X: Scholars will know how to get official docs ( ? ) and how to skim/read these Objective X.X: Scholars will see how easy it is to use a search engine to try and find other answers Objective X.X: Scholars will understand the intention of the Slack being a learning community, or something (set expectations about this) Source up problems from the class? Demo a weird plot idea, search for how to do it on stack overflow? Maybe how to change the color of facet labels in a ggplot facet graph, that’s a bit tricky and demonstrates why base R is important… 4.9 Reproducibility and sharing think about this think about the next person coming along, or yourself in 3 months links on syllabus for more info all sorts of automated stuff you can do Ask Darach if you want details, or read the paper.↩ "],["appendix.html", "5 Appendix 5.1 Additional tutorials 5.2 More challenges 5.3 Figures ideas 5.4 Rmd example of code chunk 5.5 More example Rmds 5.6 How to edit this document 5.7 More links", " 5 Appendix Useful bits 5.1 Additional tutorials a list of tutorials 5.1.1 sub sub section 5.2 More challenges Challenge yourself Extra datasets ere 5.3 Figures ideas An interactive page showing different types of figures A R graph gallery 5.4 Rmd example of code chunk knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 5.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa 5.5 More example Rmds extraRmds/worksheet.Rmd 5.6 How to edit this document Here is a too-long video about how to edit this website. Each level 1 header is its own heading the left TOC 5.6.1 Setup Clone the repo locally git clone https://github.com/darachm/dll-r 5.6.2 Edit/work on it git pull so you’re current! Error with what is in docs/? Do git checkout docs/ to remove the edits to those, then pull again. Make or edit the files whose name starts with two digits and ends with Rmd, Like 01-day3.Rmd. Feel free to run that in Rstudio or whatever. To test the full site, sun ./_build.sh to build the entire site. ( Can Rstudio run this as a terminal ??? There may be another way to do this in Rstudio - I believe they develop the bookdown package? ) The entire site is in docs/ because that is what github wants. When done, add and commit your changes. git add 02-day4.Rmd # or whatever you changed git commit -m &quot;nice commit message of what you have done&quot; git checkout docs/ # this prevents errors from docs not matching what&#39;s published git pull # to make sure current git push # to push it up to github 5.6.3 Publishing onto the main page, so it’s hosted at the URL git pull # to make sure current # if there are conflicts, then run git checkout docs/ # this prevents errors from docs not matching what&#39;s published # if not, you can skip this step! ./_build.sh # builds the site in docs/ git add docs/* # adds the entire site to the repo git commit -m &quot;updated site&quot; git push # to push it up to github 5.7 More links Claus Wilke’s dataviz bookdown "]]
